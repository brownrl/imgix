<?php

/**
 * @file
 * Exposes global functionality for overriding image styles with imgix links.
 */

/**
 * Implements hook_theme_registry_alter().
 */
function imgix_theme_registry_alter(&$theme_registry) {
  // Overrides theme_image().
  if (isset($theme_registry['image_style'])) {
    $theme_registry['image_style']['template'] = 'imgix-image-style';
    $theme_registry['image_style']['path'] = drupal_get_path('module', 'imgix') . '/templates';
    $theme_registry['image_style']['preprocess functions'] = [
      'imgix_preprocess_imgix_image_style',
    ];
  }
}

/**
 * Prepares variables for imgix style templates.
 *
 * Override from: image-style.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - width: The width of the image.
 *   - height: The height of the image.
 *   - style_name: The name of the image style to be applied.
 *   - attributes: Additional attributes to apply to the image.
 *   - uri: URI of the source image before styling.
 *   - alt: The alternative text for text-based browsers. HTML 4 and XHTML 1.0
 *     always require an alt attribute. The HTML 5 draft allows the alt
 *     attribute to be omitted in some cases. Therefore, this variable defaults
 *     to an empty string, but can be set to NULL for the attribute to be
 *     omitted. Usually, neither omission nor an empty string satisfies
 *     accessibility requirements, so it is strongly encouraged for code using
 *     '#theme' => 'image_style' to pass a meaningful value for this variable.
 *     - http://www.w3.org/TR/REC-html40/struct/objects.html#h-13.8
 *     - http://www.w3.org/TR/xhtml1/dtds.html
 *     - http://dev.w3.org/html5/spec/Overview.html#alt
 *   - title: The title text is displayed when the image is hovered in some
 *     popular browsers.
 *   - attributes: Associative array of attributes to be placed in the img tag.
 */
function imgix_preprocess_imgix_image_style(&$variables) {

  $imgix_styles = Drupal::service('imgix.styles');

  $imgix_styles->loadStyle($variables['style_name']);
  $imgix_styles->loadImage($variables['uri']);

  // Determine the dimensions of the styled image.
  $dimensions = array(
    'width' => $variables['width'],
    'height' => $variables['height'],
  );
  $imgix_styles->transformDimensions($dimensions);

  $variables['image'] = array(
    '#theme' => 'image',
    '#width' => $dimensions['width'],
    '#height' => $dimensions['height'],
    '#attributes' => $variables['attributes'],
    '#uri' => $imgix_styles->buildUrl(),
    '#style_name' => $variables['style_name'],
  );

  if (isset($variables['alt']) || array_key_exists('alt', $variables)) {
    $variables['image']['#alt'] = $variables['alt'];
  }
  if (isset($variables['title']) || array_key_exists('title', $variables)) {
    $variables['image']['#title'] = $variables['title'];
  }
}

/**
 * Create an imgix url to a file.
 *
 * @param string $uri
 *   The uri of the image file.
 * @param string $style
 *   The style to render.
 *
 * @return string The url.
 *   The url.
 */
function imgix_get_url($uri, $style = NULL) {
  $imgix_styles = Drupal::service('imgix.styles');

  $imgix_styles->loadStyle($style);
  $imgix_styles->loadImage($uri);

  return $imgix_styles->buildUrl();
}
